# curl -XGET "http://elastic:changeme@localhost:9200/analysislog-1205_1206/_search" -H 'Content-Type: application/json' -d'{  "query": {    "match_all": {}  }}'
# curl -XGET "http://elastic:changeme@localhost:9200/analysislog-1205_1206/_search" -H 'Content-Type: application/json' -d'{  "aggs": {    "2": {      "filters": {        "filters": {          "E1": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 1                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          },          "E2": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 2                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          },          "E3": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 4                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          }        }      }    }  },  "size": 0,  "stored_fields": [    "*"  ],  "script_fields": {},  "docvalue_fields": [    {      "field": "@timestamp",      "format": "date_time"    },    {      "field": "BQDate",      "format": "date_time"    },    {      "field": "EventTimestamp",      "format": "date_time"    }  ],  "_source": {    "excludes": []  },  "query": {    "bool": {      "must": [],      "filter": [        {          "match_all": {}        },        {          "range": {            "EventTimestamp": {              "gte": "2020-05-12T06:54:18.744Z",              "lte": "2021-05-12T06:54:18.744Z",              "format": "strict_date_optional_time"            }          }        }      ],      "should": [],      "must_not": []    }  }}'
# curl -XPOST "http://elastic:changeme@localhost:9200/analysislog-1205_1206/_search" -H 'Content-Type: application/json' -d'{  "aggs": {    "2": {      "filters": {        "filters": {          "E1": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 1                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          },          "E3": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 3                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          },"E4": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 4                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          }        }      }    }  },  "size": 0,  "stored_fields": [    "*"  ],  "script_fields": {},  "docvalue_fields": [    {      "field": "@timestamp",      "format": "date_time"    },    {      "field": "BQDate",      "format": "date_time"    },    {      "field": "EventTimestamp",      "format": "date_time"    }  ],  "_source": {    "excludes": []  },  "query": {    "bool": {      "must": [],      "filter": [        {          "match_all": {}        },        {          "range": {            "EventTimestamp": {              "gte": "2020-05-12T07:31:17.714Z",              "lte": "2021-05-12T07:31:17.714Z",              "format": "strict_date_optional_time"            }          }        }      ],      "should": [],      "must_not": []    }  }}'
# curl -XPOST "http://elastic:changeme@localhost:9200/analysislog-1205_1206/_search" -H 'Content-Type: application/json' -d'{  "aggs": {    "2": {      "filters": {        "filters": {          "E1": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 1                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          },          "E2": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 2                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          },          "E3": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 3                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          }        }      }    }  },  "size": 0,  "stored_fields": [    "*"  ],  "script_fields": {},  "docvalue_fields": [    {      "field": "@timestamp",      "format": "date_time"    },    {      "field": "BQDate",      "format": "date_time"    },    {      "field": "EventTimestamp",      "format": "date_time"    }  ],  "_source": {    "excludes": []  },  "query": {    "bool": {      "must": [],      "filter": [        {          "match_all": {}        },        {          "range": {            "EventTimestamp": {              "gte": "2020-05-12T08:12:39.044Z",              "lte": "2021-05-12T08:12:39.044Z",              "format": "strict_date_optional_time"            }          }        }      ],      "should": [],      "must_not": []    }  }}'
# curl -XPOST "http://elastic:changeme@localhost:9200/analysislog-1205_1206/_search" -H 'Content-Type: application/json' -d'{  "aggs": {    "2": {      "filters": {        "filters": {          "E1": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 1                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          },          "E2": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 2                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          }        }      }    }  },  "size": 0,  "stored_fields": [    "*"  ],  "script_fields": {},  "docvalue_fields": [    {      "field": "@timestamp",      "format": "date_time"    },    {      "field": "BQDate",      "format": "date_time"    },    {      "field": "EventTimestamp",      "format": "date_time"    }  ],  "_source": {    "excludes": []  },  "query": {    "bool": {      "must": [],      "filter": [        {          "match_all": {}        },        {          "range": {            "EventTimestamp": {              "gte": "2020-05-12T08:12:39.044Z",              "lte": "2021-05-12T08:12:39.044Z",              "format": "strict_date_optional_time"            }          }        }      ],      "should": [],      "must_not": []    }  }}'
import requests
import json

writeFile = True

filename = 'output.json'
headers = {
    'Content-type': 'application/json',
}
data = '{  "query": {    "match_all": {}  }}'
# data = '{  "aggs": {    "3": {      "filters": {        "filters": {          "E1": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 1                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          },          "E2": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 2                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          },          "E3": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 4                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          }        }      }    }  },  "size": 0,  "stored_fields": [    "*"  ],  "script_fields": {},  "docvalue_fields": [    {      "field": "@timestamp",      "format": "date_time"    },    {      "field": "BQDate",      "format": "date_time"    },    {      "field": "EventTimestamp",      "format": "date_time"    }  ],  "_source": {    "excludes": []  },  "query": {    "bool": {      "must": [],      "filter": [        {          "match_all": {}        },        {          "range": {            "EventTimestamp": {              "gte": "2020-05-12T06:54:18.744Z",              "lte": "2021-05-12T06:54:18.744Z",              "format": "strict_date_optional_time"            }          }        }      ],      "should": [],      "must_not": []    }  }}'
# data = '{"took":"test"}'

url = 'http://localhost:9200/analysislog-1205_1206/'
# url = 'http://localhost:9200/'
sql = '_search?pretty'
author = ('elastic', 'changeme')

response = requests.get(url + sql, headers=headers, data=data, auth=author)
myJson = json.loads(response.text)

print(json.dumps(myJson, indent=4))
print(myJson["hits"]["hits"][0]["_source"]["EventID"])
print(type(myJson))

myJson["hits"]["hits"][0]["_source"]["EventID"] = "event10"
myData = json.dumps(myJson)

# sql = '_update'
sql = ''
# postData = '{  "aggs": {    "3": {      "filters": {        "filters": {          "E1": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 1                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          },          "E3": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 3                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          },"E4": {            "bool": {              "must": [],              "filter": [                {                  "bool": {                    "should": [                      {                        "match": {                          "EventID": 4                        }                      }                    ],                    "minimum_should_match": 1                  }                }              ],              "should": [],              "must_not": []            }          }        }      }    }  },  "size": 0,  "stored_fields": [    "*"  ],  "script_fields": {},  "docvalue_fields": [    {      "field": "@timestamp",      "format": "date_time"    },    {      "field": "BQDate",      "format": "date_time"    },    {      "field": "EventTimestamp",      "format": "date_time"    }  ],  "_source": {    "excludes": []  },  "query": {    "bool": {      "must": [],      "filter": [        {          "match_all": {}        },        {          "range": {            "EventTimestamp": {              "gte": "2020-05-12T07:31:17.714Z",              "lte": "2021-05-12T07:31:17.714Z",              "format": "strict_date_optional_time"            }          }        }      ],      "should": [],      "must_not": []    }  }}'
response = requests.post(url + sql, auth=author, data=myData)
print("Post status code:", response.status_code)

if writeFile:
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(myJson, f , ensure_ascii=False, indent=4)